import ComposableArchitecture
import Foundation
import CoreData

struct HomeFeature: Reducer {
    struct State: Equatable {
        var welcomeMessage = "Welcome to SportsTracker!"
        var recentDays: [Day] = []
        var allDays: [Day] = [] // –í—Å—ñ –ø–æ–¥—ñ—ó –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        var isLoading = false
        var workout = WorkoutFeature.State()
        var addActivity = AddActivityFeature.State()
        var isShowingAddActivity = false
    }
    
    enum Action: Equatable {
        case onAppear
        case loadRecentActivities
        case daysLoaded([Day])
        case saveDay(Day)
        case deleteDay(Day)
        case updateDay(Day)
        case coreDataError(CoreDataError)
        case workout(WorkoutFeature.Action)
        case showWorkoutDetail(UUID)
        case showAddActivity
        case showStatistics
        case addActivity(AddActivityFeature.Action)
        case dismissAddActivity
    }
    
    var body: some Reducer<State, Action> {
        Scope(state: \.workout, action: /Action.workout) {
            WorkoutFeature()
        }
        
        Scope(state: \.addActivity, action: /Action.addActivity) {
            AddActivityFeature()
        }
        
        Reduce { state, action in
            switch action {
            case .onAppear:
                return .send(.loadRecentActivities)
                
            case .loadRecentActivities:
                print("üîÑ HomeFeature: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é –æ—Å—Ç–∞–Ω–Ω—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ...")
                state.isLoading = true
                return CoreDataEffects.fetchDays()
                    .map(Action.daysLoaded)
                
            case let .daysLoaded(days):
                print("üìã HomeFeature: –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ \(days.count) —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:")
                
                // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—Å—ñ –ø–æ–¥—ñ—ó –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
                state.allDays = days
                
                // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –º–∏–Ω—É–ª—ñ —Ç–∞ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–ª—è —Å–ø–∏—Å–∫—É
                let calendar = Calendar.current
                let today = calendar.startOfDay(for: Date())
                let filteredDays = days.filter { day in
                    let dayDate = calendar.startOfDay(for: day.date)
                    return dayDate <= today
                }
                
                print("üìã HomeFeature: –ü—ñ—Å–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –∑–∞–ª–∏—à–∏–ª–æ—Å—å \(filteredDays.count) —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:")
                for (index, day) in filteredDays.enumerated() {
                    print("   \(index + 1). ID: \(day.id)")
                    print("      SportType: '\(day.sportType.rawValue)'")
                    print("      Date: \(day.date)")
                    print("      Duration: \(day.duration)")
                    print("      Comment: \(day.comment ?? "nil")")
                    print("      Steps: \(day.steps ?? 0)")
                    print("      Calories: \(day.calories ?? 0)")
                    print("      Distance: \(day.distance ?? 0) –º")
                }
                state.recentDays = filteredDays
                state.isLoading = false
                return .none
                
            case let .saveDay(day):
                return .run { send in
                    do {
                        let context = await MainActor.run { PersistenceController.shared.container.viewContext }
                        let dayEntity = DayEntity(context: context)
                        
                        dayEntity.id = day.id
                        dayEntity.date = day.date
                        dayEntity.sportType = day.sportType.rawValue
                        dayEntity.comment = day.comment
                        dayEntity.duration = day.duration
                        dayEntity.steps = Int32(day.steps ?? 0)
                        dayEntity.calories = Int32(day.calories ?? 0)
                        dayEntity.distance = day.distance ?? 0
                        
                        try context.save()
                        print("‚úÖ HomeFeature: –£—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è")
                        await send(.loadRecentActivities)
                    } catch {
                        print("‚ùå HomeFeature: –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: \(error)")
                    }
                }
                
            case let .deleteDay(day):
                return CoreDataEffects.deleteDay(day)
                    .map { _ in .loadRecentActivities }
                
            case let .updateDay(day):
                return CoreDataEffects.updateDay(day)
                    .map { _ in .loadRecentActivities }
                
            case let .coreDataError(error):
                state.isLoading = false
                // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫
                print("Core Data Error: \(error)")
                return .none
                
            case .workout(.notifyWorkoutCompleted):
                print("üîÑ HomeFeature: –û—Ç—Ä–∏–º–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è, –æ–Ω–æ–≤–ª—é—é —Å–ø–∏—Å–æ–∫")
                return .send(.loadRecentActivities)
                
            case .workout:
                return .none
                
            case let .showWorkoutDetail(workoutId):
                // –ü–µ—Ä–µ–¥–∞—î–º–æ –¥—ñ—é –≤–≥–æ—Ä—É –¥–æ AppFeature
                print("üì§ HomeFeature: –ü–µ—Ä–µ–¥–∞—é showWorkoutDetail –∑ ID: \(workoutId)")
                return .none
                
            case .showAddActivity:
                state.isShowingAddActivity = true
                return .none
                
            case .showStatistics:
                print("üì§ HomeFeature: –ü–æ–∫–∞–∑—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
                return .none
                
            case .addActivity(.dismiss), .dismissAddActivity:
                state.isShowingAddActivity = false
                return .none
                
            case .addActivity(.saveActivity):
                // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π Day –∑ –¥–∞–Ω–∏—Ö —Ñ–æ—Ä–º–∏
                let calendar = Calendar.current
                let combinedDate = calendar.date(bySettingHour: calendar.component(.hour, from: state.addActivity.startTime),
                                               minute: calendar.component(.minute, from: state.addActivity.startTime),
                                               second: 0,
                                               of: state.addActivity.selectedDate) ?? state.addActivity.selectedDate
                
                let newDay = Day(
                    date: combinedDate,
                    sportType: state.addActivity.selectedSportType,
                    comment: state.addActivity.comment.isEmpty ? nil : state.addActivity.comment,
                    duration: state.addActivity.calculatedDurationInSeconds,
                    distance: state.addActivity.calculatedDistanceInMeters > 0 ? state.addActivity.calculatedDistanceInMeters : nil,
                    steps: nil,
                    calories: state.addActivity.calories,
                    supplements: nil
                )
                
                print("üíæ HomeFeature: –°—Ç–≤–æ—Ä—é—é –Ω–æ–≤—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å:")
                print("   –°–ø–æ—Ä—Ç: \(newDay.sportType.rawValue)")
                print("   –î–∞—Ç–∞: \(newDay.date)")
                print("   –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: \(newDay.duration) —Å–µ–∫—É–Ω–¥")
                print("   –î–∏—Å—Ç–∞–Ω—Ü—ñ—è: \(newDay.distance ?? 0) –º–µ—Ç—Ä—ñ–≤")
                print("   –ö–∞–ª–æ—Ä—ñ—ó: \(newDay.calories ?? 0)")
                
                state.isShowingAddActivity = false
                return .send(.saveDay(newDay))
                
            case .addActivity:
                return .none
            }
        }
    }
}

// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–æ–¥–µ–ª—å Day –∑–∞–º—ñ—Å—Ç—å Activity
